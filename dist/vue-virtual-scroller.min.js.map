{"version":3,"file":"vue-virtual-scroller.min.js","sources":["../src/config.js","../node_modules/vue-resize/dist/vue-resize.esm.js","../node_modules/vue-observe-visibility/dist/vue-observe-visibility.esm.js","../node_modules/scrollparent/scrollparent.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/RecycleScroller.vue?vue&type=template&id=093a936d&lang.js","../src/components/DynamicScroller.vue","../src/components/DynamicScroller.vue?vue&type=template&id=76e15f19&lang.js","../src/components/DynamicScrollerItem.vue","../src/index.js","../src/mixins/IdState.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","function getInternetExplorerVersion() {\n\tvar ua = window.navigator.userAgent;\n\n\tvar msie = ua.indexOf('MSIE ');\n\tif (msie > 0) {\n\t\t// IE 10 or older => return version number\n\t\treturn parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n\t}\n\n\tvar trident = ua.indexOf('Trident/');\n\tif (trident > 0) {\n\t\t// IE 11 => return version number\n\t\tvar rv = ua.indexOf('rv:');\n\t\treturn parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n\t}\n\n\tvar edge = ua.indexOf('Edge/');\n\tif (edge > 0) {\n\t\t// Edge (IE 12+) => return version number\n\t\treturn parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n\t}\n\n\t// other browser\n\treturn -1;\n}\n\nvar isIE = void 0;\n\nfunction initCompat() {\n\tif (!initCompat.init) {\n\t\tinitCompat.init = true;\n\t\tisIE = getInternetExplorerVersion() !== -1;\n\t}\n}\n\nvar ResizeObserver = { render: function render() {\n\t\tvar _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: \"resize-observer\", attrs: { \"tabindex\": \"-1\" } });\n\t}, staticRenderFns: [], _scopeId: 'data-v-b329ee4c',\n\tname: 'resize-observer',\n\n\tmethods: {\n\t\tcompareAndNotify: function compareAndNotify() {\n\t\t\tif (this._w !== this.$el.offsetWidth || this._h !== this.$el.offsetHeight) {\n\t\t\t\tthis._w = this.$el.offsetWidth;\n\t\t\t\tthis._h = this.$el.offsetHeight;\n\t\t\t\tthis.$emit('notify');\n\t\t\t}\n\t\t},\n\t\taddResizeHandlers: function addResizeHandlers() {\n\t\t\tthis._resizeObject.contentDocument.defaultView.addEventListener('resize', this.compareAndNotify);\n\t\t\tthis.compareAndNotify();\n\t\t},\n\t\tremoveResizeHandlers: function removeResizeHandlers() {\n\t\t\tif (this._resizeObject && this._resizeObject.onload) {\n\t\t\t\tif (!isIE && this._resizeObject.contentDocument) {\n\t\t\t\t\tthis._resizeObject.contentDocument.defaultView.removeEventListener('resize', this.compareAndNotify);\n\t\t\t\t}\n\t\t\t\tdelete this._resizeObject.onload;\n\t\t\t}\n\t\t}\n\t},\n\n\tmounted: function mounted() {\n\t\tvar _this = this;\n\n\t\tinitCompat();\n\t\tthis.$nextTick(function () {\n\t\t\t_this._w = _this.$el.offsetWidth;\n\t\t\t_this._h = _this.$el.offsetHeight;\n\t\t});\n\t\tvar object = document.createElement('object');\n\t\tthis._resizeObject = object;\n\t\tobject.setAttribute('aria-hidden', 'true');\n\t\tobject.setAttribute('tabindex', -1);\n\t\tobject.onload = this.addResizeHandlers;\n\t\tobject.type = 'text/html';\n\t\tif (isIE) {\n\t\t\tthis.$el.appendChild(object);\n\t\t}\n\t\tobject.data = 'about:blank';\n\t\tif (!isIE) {\n\t\t\tthis.$el.appendChild(object);\n\t\t}\n\t},\n\tbeforeDestroy: function beforeDestroy() {\n\t\tthis.removeResizeHandlers();\n\t}\n};\n\n// Install the components\nfunction install(Vue) {\n\tVue.component('resize-observer', ResizeObserver);\n\tVue.component('ResizeObserver', ResizeObserver);\n}\n\n// Plugin\nvar plugin = {\n\t// eslint-disable-next-line no-undef\n\tversion: \"0.4.5\",\n\tinstall: install\n};\n\n// Auto-install\nvar GlobalVue = null;\nif (typeof window !== 'undefined') {\n\tGlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n\tGlobalVue = global.Vue;\n}\nif (GlobalVue) {\n\tGlobalVue.use(plugin);\n}\n\nexport { install, ResizeObserver };\nexport default plugin;\n","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction processOptions(value) {\n  var options;\n\n  if (typeof value === 'function') {\n    // Simple options (callback-only)\n    options = {\n      callback: value\n    };\n  } else {\n    // Options object\n    options = value;\n  }\n\n  return options;\n}\nfunction throttle(callback, delay) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var timeout;\n  var lastState;\n  var currentArgs;\n\n  var throttled = function throttled(state) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    currentArgs = args;\n    if (timeout && state === lastState) return;\n    var leading = options.leading;\n\n    if (typeof leading === 'function') {\n      leading = leading(state, lastState);\n    }\n\n    if ((!timeout || state !== lastState) && leading) {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n    }\n\n    lastState = state;\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));\n      timeout = 0;\n    }, delay);\n  };\n\n  throttled._clear = function () {\n    clearTimeout(timeout);\n    timeout = null;\n  };\n\n  return throttled;\n}\nfunction deepEqual(val1, val2) {\n  if (val1 === val2) return true;\n\n  if (_typeof(val1) === 'object') {\n    for (var key in val1) {\n      if (!deepEqual(val1[key], val2[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar VisibilityState =\n/*#__PURE__*/\nfunction () {\n  function VisibilityState(el, options, vnode) {\n    _classCallCheck(this, VisibilityState);\n\n    this.el = el;\n    this.observer = null;\n    this.frozen = false;\n    this.createObserver(options, vnode);\n  }\n\n  _createClass(VisibilityState, [{\n    key: \"createObserver\",\n    value: function createObserver(options, vnode) {\n      var _this = this;\n\n      if (this.observer) {\n        this.destroyObserver();\n      }\n\n      if (this.frozen) return;\n      this.options = processOptions(options);\n\n      this.callback = function (result, entry) {\n        _this.options.callback(result, entry);\n\n        if (result && _this.options.once) {\n          _this.frozen = true;\n\n          _this.destroyObserver();\n        }\n      }; // Throttle\n\n\n      if (this.callback && this.options.throttle) {\n        var _ref = this.options.throttleOptions || {},\n            _leading = _ref.leading;\n\n        this.callback = throttle(this.callback, this.options.throttle, {\n          leading: function leading(state) {\n            return _leading === 'both' || _leading === 'visible' && state || _leading === 'hidden' && !state;\n          }\n        });\n      }\n\n      this.oldResult = undefined;\n      this.observer = new IntersectionObserver(function (entries) {\n        var entry = entries[0];\n\n        if (entries.length > 1) {\n          var intersectingEntry = entries.find(function (e) {\n            return e.isIntersecting;\n          });\n\n          if (intersectingEntry) {\n            entry = intersectingEntry;\n          }\n        }\n\n        if (_this.callback) {\n          // Use isIntersecting if possible because browsers can report isIntersecting as true, but intersectionRatio as 0, when something very slowly enters the viewport.\n          var result = entry.isIntersecting && entry.intersectionRatio >= _this.threshold;\n          if (result === _this.oldResult) return;\n          _this.oldResult = result;\n\n          _this.callback(result, entry);\n        }\n      }, this.options.intersection); // Wait for the element to be in document\n\n      vnode.context.$nextTick(function () {\n        if (_this.observer) {\n          _this.observer.observe(_this.el);\n        }\n      });\n    }\n  }, {\n    key: \"destroyObserver\",\n    value: function destroyObserver() {\n      if (this.observer) {\n        this.observer.disconnect();\n        this.observer = null;\n      } // Cancel throttled call\n\n\n      if (this.callback && this.callback._clear) {\n        this.callback._clear();\n\n        this.callback = null;\n      }\n    }\n  }, {\n    key: \"threshold\",\n    get: function get() {\n      return this.options.intersection && this.options.intersection.threshold || 0;\n    }\n  }]);\n\n  return VisibilityState;\n}();\n\nfunction bind(el, _ref2, vnode) {\n  var value = _ref2.value;\n  if (!value) return;\n\n  if (typeof IntersectionObserver === 'undefined') {\n    console.warn('[vue-observe-visibility] IntersectionObserver API is not available in your browser. Please install this polyfill: https://github.com/w3c/IntersectionObserver/tree/master/polyfill');\n  } else {\n    var state = new VisibilityState(el, value, vnode);\n    el._vue_visibilityState = state;\n  }\n}\n\nfunction update(el, _ref3, vnode) {\n  var value = _ref3.value,\n      oldValue = _ref3.oldValue;\n  if (deepEqual(value, oldValue)) return;\n  var state = el._vue_visibilityState;\n\n  if (!value) {\n    unbind(el);\n    return;\n  }\n\n  if (state) {\n    state.createObserver(value, vnode);\n  } else {\n    bind(el, {\n      value: value\n    }, vnode);\n  }\n}\n\nfunction unbind(el) {\n  var state = el._vue_visibilityState;\n\n  if (state) {\n    state.destroyObserver();\n    delete el._vue_visibilityState;\n  }\n}\n\nvar ObserveVisibility = {\n  bind: bind,\n  update: update,\n  unbind: unbind\n};\n\nfunction install(Vue) {\n  Vue.directive('observe-visibility', ObserveVisibility);\n  /* -- Add more components here -- */\n}\n/* -- Plugin definition & Auto-install -- */\n\n/* You shouldn't have to modify the code below */\n// Plugin\n\nvar plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"0.4.6\",\n  install: install\n};\n\nvar GlobalVue = null;\n\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue;\n}\n\nif (GlobalVue) {\n  GlobalVue.use(plugin);\n}\n\nexport default plugin;\nexport { ObserveVisibility, install };\n","(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    module.exports = factory();\n  } else {\n    root.Scrollparent = factory();\n  }\n}(this, function () {\n  var regex = /(auto|scroll)/;\n\n  var parents = function (node, ps) {\n    if (node.parentNode === null) { return ps; }\n\n    return parents(node.parentNode, ps.concat([node]));\n  };\n\n  var style = function (node, prop) {\n    return getComputedStyle(node, null).getPropertyValue(prop);\n  };\n\n  var overflow = function (node) {\n    return style(node, \"overflow\") + style(node, \"overflow-y\") + style(node, \"overflow-x\");\n  };\n\n  var scroll = function (node) {\n   return regex.test(overflow(node));\n  };\n\n  var scrollParent = function (node) {\n    if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n      return ;\n    }\n\n    var ps = parents(node.parentNode, []);\n\n    for (var i = 0; i < ps.length; i += 1) {\n      if (scroll(ps[i])) {\n        return ps[i];\n      }\n    }\n\n    return document.scrollingElement || document.documentElement;\n  };\n\n  return scrollParent;\n}));\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport ScrollParent from 'scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n    this.$_lastUpdateScrollEndPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeDestroy () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const view = {\n        item,\n        position: 0,\n      }\n      const nonReactive = {\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      }\n      Object.defineProperty(view, 'nr', {\n        configurable: false,\n        value: nonReactive,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          const positionDiff = Math.max(Math.abs(scroll.start - this.$_lastUpdateScrollPosition), Math.abs(scroll.end - this.$_lastUpdateScrollEndPosition))\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n        this.$_lastUpdateScrollEndPosition = scroll.end\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = ScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {\n        passive: true,\n      } : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <div\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n    >\n      <div\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px)` } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"{ hover: hoverKey === view.nr.key }\"\n        @mouseenter=\"hoverKey = view.nr.key\"\n        @mouseleave=\"hoverKey = null\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"$slots.after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport ScrollParent from 'scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n    this.$_lastUpdateScrollEndPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  beforeDestroy () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const view = {\n        item,\n        position: 0,\n      }\n      const nonReactive = {\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      }\n      Object.defineProperty(view, 'nr', {\n        configurable: false,\n        value: nonReactive,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n\n      if (!count) {\n        startIndex = endIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = 0\n        endIndex = this.prerender\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          const positionDiff = Math.max(Math.abs(scroll.start - this.$_lastUpdateScrollPosition), Math.abs(scroll.end - this.$_lastUpdateScrollEndPosition))\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n        this.$_lastUpdateScrollEndPosition = scroll.end\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize)\n          endIndex = Math.ceil(scroll.end / itemSize)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n\n          totalSize = count * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.findIndex(\n                item => keyField ? item[keyField] === view.item[keyField] : item === view.item,\n              )\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n        } else {\n          view.position = i * itemSize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = ScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {\n        passive: true,\n      } : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = index * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      if (this.direction === 'vertical') {\n        this.$el.scrollTop = position\n      } else {\n        this.$el.scrollLeft = position\n      }\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n    v-on=\"listeners\"\n  >\n    <template slot-scope=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template slot=\"before\">\n      <slot name=\"before\" />\n    </template>\n    <template slot=\"after\">\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  inheritAttrs: false,\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n\n    listeners () {\n      const listeners = {}\n      for (const key in this.$listeners) {\n        if (key !== 'resize' && key !== 'visible') {\n          listeners[key] = this.$listeners[key]\n        }\n      }\n      return listeners\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n    v-on=\"listeners\"\n  >\n    <template slot-scope=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template slot=\"before\">\n      <slot name=\"before\" />\n    </template>\n    <template slot=\"after\">\n      <slot name=\"after\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  inheritAttrs: false,\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target) {\n            const event = new CustomEvent(\n              'resize',\n              {\n                detail: {\n                  contentRect: entry.contentRect,\n                },\n              },\n            )\n            entry.target.dispatchEvent(event)\n          }\n        }\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n\n    listeners () {\n      const listeners = {}\n      for (const key in this.$listeners) {\n        if (key !== 'resize' && key !== 'visible') {\n          listeners[key] = this.$listeners[key]\n        }\n      }\n      return listeners\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n  },\n\n  created () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  computed: {\n    id () {\n      return this.vscrollData.simpleArray ? this.index : this.item[this.vscrollData.keyField]\n    },\n\n    size () {\n      return (this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id]) || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id () {\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$on('vscroll:update', this.onVscrollUpdate)\n      this.vscrollParent.$on('vscroll:update-size', this.onVscrollUpdateSize)\n    }\n  },\n\n  mounted () {\n    if (this.vscrollData.active) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeDestroy () {\n    this.vscrollParent.$off('vscroll:update', this.onVscrollUpdate)\n    this.vscrollParent.$off('vscroll:update-size', this.onVscrollUpdateSize)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData) {\n        this.$_watchData = this.$watch('data', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applySize(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applySize (width, height) {\n      const size = Math.round(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        if (this.vscrollParent.$_undefinedMap[this.id]) {\n          this.vscrollParent.$_undefinedSizes--\n          this.vscrollParent.$_undefinedMap[this.id] = undefined\n        }\n        this.$set(this.vscrollData.sizes, this.id, size)\n        this.$set(this.vscrollData.validSizes, this.id, true)\n        if (this.emitResize) this.$emit('resize', this.id)\n      }\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.observe(this.$el.parentNode)\n      this.$el.parentNode.addEventListener('resize', this.onResize)\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.unobserve(this.$el.parentNode)\n      this.$el.parentNode.removeEventListener('resize', this.onResize)\n    },\n\n    onResize (event) {\n      const { width, height } = event.detail.contentRect\n      this.applySize(width, height)\n    },\n  },\n\n  render (h) {\n    return h(this.tag, this.$slots.default)\n  },\n}\n</script>\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (Vue, prefix) {\n  Vue.component(`${prefix}recycle-scroller`, RecycleScroller)\n  Vue.component(`${prefix}RecycleScroller`, RecycleScroller)\n  Vue.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  Vue.component(`${prefix}DynamicScroller`, DynamicScroller)\n  Vue.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  Vue.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (Vue, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(Vue, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n\n// Auto-install\nlet GlobalVue = null\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin)\n}\n","import Vue from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = {}\n  const vm = new Vue({\n    data () {\n      return {\n        store,\n      }\n    },\n  })\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          vm.$set(store, id, data)\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n"],"names":["itemsLimit","isIE","initCompat","init","ua","window","navigator","userAgent","msie","indexOf","parseInt","substring","rv","edge","getInternetExplorerVersion","ResizeObserver","render","_h","this","$createElement","_self","_c","staticClass","attrs","tabindex","staticRenderFns","_scopeId","name","methods","compareAndNotify","_w","$el","offsetWidth","offsetHeight","$emit","addResizeHandlers","_resizeObject","contentDocument","defaultView","addEventListener","removeResizeHandlers","onload","removeEventListener","mounted","_this","$nextTick","object","document","createElement","setAttribute","type","appendChild","data","beforeDestroy","plugin","version","install","Vue","component","GlobalVue","_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_toConsumableArray","arr","Array","isArray","arr2","_arrayWithoutHoles","iter","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","deepEqual","val1","val2","global","use","VisibilityState","el","options","vnode","instance","Constructor","_classCallCheck","observer","frozen","createObserver","protoProps","staticProps","value","destroyObserver","callback","result","entry","once","throttle","_leading","throttleOptions","leading","delay","timeout","lastState","currentArgs","arguments","undefined","throttled","state","_len","args","_key","apply","concat","clearTimeout","setTimeout","_clear","oldResult","IntersectionObserver","entries","intersectingEntry","find","e","isIntersecting","intersectionRatio","threshold","intersection","context","observe","disconnect","get","bind","_ref2","console","warn","_vue_visibilityState","unbind","ObserveVisibility","update","_ref3","oldValue","directive","root","factory","regex","parents","node","ps","parentNode","style","prop","getComputedStyle","getPropertyValue","scroll","test","overflow","HTMLElement","SVGElement","scrollingElement","documentElement","exports","module","Scrollparent","items","required","keyField","String","default","direction","validator","includes","simpleArray","supportsPassive","opts","uid","components","directives","itemSize","Number","minItemSize","sizeField","typeField","buffer","pageMode","Boolean","prerender","emitUpdate","pool","totalSize","ready","hoverKey","computed","sizes","accumulator","field","current","computedMinSize","l","size","$_computedMinItemSize","watch","updateVisibleItems","applyPageMode","handler","deep","created","$_startIndex","$_endIndex","$_views","Map","$_unusedViews","$_scrollDirty","$_lastUpdateScrollPosition","$_lastUpdateScrollEndPosition","$_prerender","removeListeners","addView","index","item","view","position","nonReactive","id","used","push","unuseView","fake","unusedViews","nr","unusedPool","set","delete","handleResize","handleScroll","event","requestAnimationFrame","continuous","$_refreshTimout","handleVisibilityChange","isVisible","boundingClientRect","width","height","checkItem","checkPositionDiff","count","views","startIndex","endIndex","getScroll","positionDiff","Math","max","abs","start","end","h","oldI","a","b","ceil","config","itemsLimitError","$_continuous","clear","findIndex","unusedIndex","v","Error","pop","$_sortTimer","sortViews","getListenerTarget","ScrollParent","body","isVertical","scrollState","bounds","getBoundingClientRect","boundsSize","top","left","innerHeight","innerWidth","scrollTop","clientHeight","scrollLeft","clientWidth","addListeners","listenerTarget","passive","scrollToItem","scrollToPosition","log","sort","viewA","viewB","class","_createElementBlock","$options","_ctx","_hoisted_1","_renderSlot","_createElementVNode","ref","$data","onMouseenter","onMouseleave","active","_hoisted_3","_createVNode","onNotify","RecycleScroller","inheritAttrs","provide","$_resizeObserver","CustomEvent","detail","contentRect","dispatchEvent","vscrollData","vscrollParent","vscrollResizeObserver","validSizes","itemsWithSize","$_undefinedMap","listeners","$listeners","forceUpdate","immediate","$_updates","$_undefinedSizes","activated","deactivated","onScrollerResize","$refs","scroller","onScrollerVisible","force","getItemSize","scrollToBottom","$_scrollingToBottom","scrollHeight","cb","slot","_createBlock","_mergeProps","$props","onResize","onVisible","_toHandlers","_hoisted_2","inject","watchData","sizeDependencies","emitResize","tag","finalActive","onDataUpdate","observeSize","unobserveSize","$_pendingVScrollUpdate","updateSize","$isServer","$_forceNextVScrollUpdate","updateWatchData","k","$watch","$on","onVscrollUpdate","onVscrollUpdateSize","$off","$_pendingSizeUpdate","computeSize","$_watchData","applySize","round","$set","unobserve","$slots","VERSION","finalOptions","assign","installComponents","componentsPrefix","prefix","DynamicScroller","DynamicScrollerItem","registerComponents","idProp","vm","store","idState","$_id","$_getId","_this2","$_updateIdState","beforeUpdate","$_idStateInit"],"mappings":"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"}